import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { uploadImageWithRetry } from '@/lib/storage/imageUpload'

interface GenerateImageRequest {
  prompt: string
  type: 'character' | 'background' | 'scene'
  optimizePrompt?: boolean
  projectId?: string
  metadata?: {
    name?: string
    style?: string
    traits?: string[]
    archetype?: string
    [key: string]: unknown
  }
}

// Prompt optimization templates for manga style
const MANGA_TEMPLATES = {
  character: "manga style character, anime art, detailed character design, clean lines, cel shading, professional illustration, full body portrait",
  background: "manga style background, anime environment, detailed scenery, atmospheric lighting, professional illustration",
  scene: "manga style scene, anime composition, dynamic layout, detailed illustration, professional artwork"
}

const QUALITY_ENHANCERS = "high quality, detailed, sharp, professional, 4k resolution, masterpiece"
const STYLE_CONSISTENCY = "consistent art style, manga aesthetic, anime style, vibrant colors"

// Enhanced character-specific templates
const CHARACTER_STYLE_TEMPLATES = {
  shonen: "shonen manga style, dynamic pose, determined expression, action-oriented design",
  shoujo: "shoujo manga style, elegant features, soft expressions, romantic aesthetic, beautiful details",
  seinen: "seinen manga style, mature design, realistic proportions, sophisticated appearance",
  josei: "josei manga style, refined features, adult character design, elegant composition",
  chibi: "chibi manga style, cute proportions, large eyes, small body, adorable design",
  realistic: "semi-realistic manga style, detailed anatomy, natural proportions, refined artwork"
}

function optimizePromptInternal(originalPrompt: string, imageType: 'character' | 'background' | 'scene', metadata?: Record<string, unknown>): string {
  // Remove any existing style keywords to avoid conflicts
  const cleanPrompt = originalPrompt
    .replace(/\b(manga|anime|style|art)\b/gi, '')
    .replace(/\s+/g, ' ')
    .trim()

  // Add manga-specific template
  let template = MANGA_TEMPLATES[imageType]

  // For characters, add style-specific template if available
  if (imageType === 'character' && metadata?.style && CHARACTER_STYLE_TEMPLATES[metadata.style as keyof typeof CHARACTER_STYLE_TEMPLATES]) {
    template += `, ${CHARACTER_STYLE_TEMPLATES[metadata.style as keyof typeof CHARACTER_STYLE_TEMPLATES]}`
  }

  // Construct optimized prompt
  const optimizedPrompt = `${template}, ${cleanPrompt}, ${QUALITY_ENHANCERS}, ${STYLE_CONSISTENCY}`

  return optimizedPrompt
}

async function generateImageWithXai(prompt: string): Promise<string> {
  // Use the specialized image generation key
  const XAI_API_KEY = process.env.XAI_API_KEY

  console.log('üé® Image generation with prompt:', prompt.substring(0, 100) + '...')

  if (!XAI_API_KEY) {
    console.error('‚ùå XAI_API_KEY not configured for image generation')
    throw new Error('XAI_API_KEY not configured for image generation')
  }

  // Mask API key in logs for security
  const maskedKey = XAI_API_KEY.substring(0, 8) + '...' + XAI_API_KEY.substring(XAI_API_KEY.length - 4)
  console.log('üîë Using API key:', maskedKey)

  try {
    // Attempt xAI API call with timeout
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 seconds timeout

    console.log('üîó X.AI API call with grok-2-image-1212 model...')

    const response = await fetch('https://api.x.ai/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${XAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'grok-2-image-1212',
        prompt: prompt
      }),
      signal: controller.signal
    })

    clearTimeout(timeoutId)

    console.log('üì° X.AI response status:', response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå xAI API error:', response.status, errorText)
      throw new Error(`xAI API error: ${response.status} - ${errorText}`)
    }

    const result = await response.json()
    console.log('üìã X.AI response received:', result)

    if (result.data && result.data[0] && result.data[0].url) {
      console.log('‚úÖ Image generated successfully via xAI:', result.data[0].url)
      return result.data[0].url
    } else {
      console.error('‚ùå Invalid response format:', result)
      throw new Error('Invalid response format from xAI API')
    }
  } catch (error) {
    console.error('‚ö†Ô∏è Erreur lors de l\'appel √† l\'API xAI:', error)
    throw error // Re-throw l'erreur pour la gestion en amont
  }
}

export async function POST(request: NextRequest) {
  console.log('üöÄ D√©but de la requ√™te de g√©n√©ration d\'image')

  try {
    const supabase = await createClient()
    console.log('‚úÖ Client Supabase cr√©√© avec succ√®s')

    // Get user from session
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError) {
      console.error('‚ùå Erreur d\'authentification:', authError)
      return NextResponse.json(
        { error: 'Authentication error', success: false },
        { status: 401 }
      )
    }

    if (!user) {
      console.error('‚ùå Utilisateur non connect√©')
      return NextResponse.json(
        { error: 'Unauthorized - no user', success: false },
        { status: 401 }
      )
    }

    console.log('‚úÖ User authenticated:', user.id)

    // Parse request body
    const body: GenerateImageRequest = await request.json()
    const { prompt, type, optimizePrompt = true, projectId, metadata } = body

    console.log('üìã Request data:', { prompt: prompt?.substring(0, 50) + '...', type, optimizePrompt, projectId })

    if (!prompt || !type) {
      console.error('‚ùå Missing required fields:', { prompt: !!prompt, type: !!type })
      return NextResponse.json(
        { error: 'Missing required fields: prompt, type', success: false },
        { status: 400 }
      )
    }

    // Check user limits BEFORE generation
    const usageType = type === 'character' ? 'character_images' :
                     type === 'background' ? 'decor_images' : 'scene_generation'

    const { data: userLimits, error: limitsError } = await supabase
      .rpc('get_user_limits', { p_user_id: user.id })

    const { data: userUsage, error: usageError } = await supabase
      .rpc('get_user_usage_stats', { p_user_id: user.id })

    if (limitsError || usageError) {
      console.error('‚ùå Erreur v√©rification limites:', { limitsError, usageError })
      return NextResponse.json(
        { error: 'Erreur lors de la v√©rification des limites', success: false },
        { status: 500 }
      )
    }

    // Debug: Afficher les donn√©es re√ßues
    console.log('üîç Debug userLimits:', userLimits)
    console.log('üîç Debug userUsage:', userUsage)
    console.log('üîç Debug usageType:', usageType)

    // CORRECTION: Les fonctions RPC retournent des TABLEAUX avec un seul √©l√©ment
    const limitsData = Array.isArray(userLimits) ? userLimits[0] : userLimits
    const usageData = Array.isArray(userUsage) ? userUsage[0] : userUsage

    // V√©rifier si l'utilisateur peut g√©n√©rer ce type d'image
    const currentUsage = usageData?.[usageType] || 0
    const currentLimit = limitsData?.[usageType] || 0
    const monthlyUsage = usageData?.monthly_generations || 0
    const monthlyLimit = limitsData?.monthly_generations || 0

    console.log('üîç Debug valeurs extraites:', { currentUsage, currentLimit, monthlyUsage, monthlyLimit })

    // Si les limites ne sont pas illimit√©es (-1), v√©rifier les d√©passements
    if (currentLimit !== -1 && currentUsage >= currentLimit) {
      console.log('‚ùå Limite sp√©cifique atteinte:', { type: usageType, usage: currentUsage, limit: currentLimit })
      return NextResponse.json(
        {
          error: 'Limite atteinte',
          success: false,
          limitType: usageType,
          currentUsage,
          limit: currentLimit,
          message: `Vous avez atteint votre limite de ${type === 'character' ? 'personnages' : type === 'background' ? 'd√©cors' : 'sc√®nes'} (${currentUsage}/${currentLimit})`
        },
        { status: 402 } // Payment Required
      )
    }

    if (monthlyLimit !== -1 && monthlyUsage >= monthlyLimit) {
      console.log('‚ùå Limite mensuelle atteinte:', { monthlyUsage, monthlyLimit })
      return NextResponse.json(
        {
          error: 'Limite mensuelle atteinte',
          success: false,
          limitType: 'monthly_generations',
          currentUsage: monthlyUsage,
          limit: monthlyLimit,
          message: `Vous avez atteint votre limite mensuelle de g√©n√©rations (${monthlyUsage}/${monthlyLimit})`
        },
        { status: 402 } // Payment Required
      )
    }

    console.log('‚úÖ Limites v√©rifi√©es:', {
      type: usageType,
      usage: `${currentUsage}/${currentLimit}`,
      monthly: `${monthlyUsage}/${monthlyLimit}`
    })

    // TEMPORAIREMENT D√âSACTIV√â : V√©rifications de quotas supprim√©es pour le d√©veloppement
    // Les limitations seront r√©impl√©ment√©es plus tard selon les besoins business

    // Optimize prompt if requested
    const finalPrompt = optimizePrompt ? optimizePromptInternal(prompt, type, metadata) : prompt

    // Generate image
    const startTime = Date.now()
    let imageUrl: string

    try {
      imageUrl = await generateImageWithXai(finalPrompt)
    } catch (error) {
      // Return clear error instead of using test images
      return NextResponse.json(
        {
          error: 'Image generation failed',
          success: false,
          details: error instanceof Error ? error.message : 'Unknown error occurred',
          message: 'Image generation failed. Please try again or contact support if the problem persists.'
        },
        { status: 500 }
      )
    }

    const generationTime = Date.now() - startTime

    // Generate unique ID for this image
    const imageId = crypto.randomUUID()

    // Upload image to Supabase Storage for permanent storage
    console.log('üì¶ Uploading image to Supabase Storage...')

    let publicUrl: string
    let storagePath: string | undefined

    try {
      const uploadResult = await uploadImageWithRetry(imageUrl, user.id, imageId, type as 'character' | 'background' | 'scene')

      if (!uploadResult.success) {
        console.error('‚ùå √âchec du stockage permanent:', uploadResult.error)
        return NextResponse.json(
          {
            error: 'Image storage failed',
            success: false,
            details: uploadResult.error,
            message: 'L\'image a √©t√© g√©n√©r√©e mais n\'a pas pu √™tre sauvegard√©e. Veuillez r√©essayer.'
          },
          { status: 500 }
        )
      }

      publicUrl = uploadResult.publicUrl!
      storagePath = uploadResult.storagePath
      console.log('‚úÖ Image stock√©e de mani√®re permanente:', publicUrl)

    } catch (error) {
      console.error('üö® Erreur lors du stockage:', error)
      return NextResponse.json(
        {
          error: 'Image storage failed',
          success: false,
          details: error instanceof Error ? error.message : 'Storage error',
          message: 'L\'image a √©t√© g√©n√©r√©e mais n\'a pas pu √™tre sauvegard√©e. Veuillez r√©essayer.'
        },
        { status: 500 }
      )
    }

    // Save to database
    console.log('üíæ Sauvegarde en base de donn√©es...')

    const imageRecord = {
      id: imageId,
      user_id: user.id,
      project_id: projectId,
      original_prompt: prompt,
      optimized_prompt: finalPrompt,
      image_url: publicUrl,
      metadata: {
        ...metadata,
        storage_path: storagePath,
        is_permanent: true,
        original_xai_url: imageUrl,
        upload_success: true,
        upload_error: null
      }
    }

    console.log('üìù Donn√©es √† ins√©rer:', imageRecord)

    // D√©terminer la table de destination selon le type d'image
    const targetTable = type === 'character' ? 'character_images' : 'decor_images'
    console.log(`üéØ Sauvegarde dans la table: ${targetTable}`)

    const { error: insertError } = await supabase
      .from(targetTable)
      .insert(imageRecord)

    if (insertError) {
      console.error('‚ùå Erreur lors de la sauvegarde en base de donn√©es:', insertError)
      console.error('üìä D√©tails de l\'erreur:', {
        message: insertError.message,
        details: insertError.details,
        hint: insertError.hint,
        code: insertError.code
      })

      // L'image est stock√©e mais pas sauvegard√©e en DB - c'est un probl√®me critique
      return NextResponse.json(
        {
          error: 'Database save failed',
          success: false,
          details: insertError.message,
          message: 'L\'image a √©t√© g√©n√©r√©e et stock√©e, mais n\'a pas pu √™tre enregistr√©e en base de donn√©es. Contactez le support.'
        },
        { status: 500 }
      )
    }

    console.log('‚úÖ Image sauvegard√©e avec succ√®s en base de donn√©es')

    // Incr√©menter les compteurs d'usage selon le type d'image g√©n√©r√©e
    // (usageType d√©j√† d√©fini plus haut dans la fonction)
    const { error: updateError } = await supabase
      .rpc('increment_user_usage', {
        p_user_id: user.id,
        p_usage_type: usageType,
        p_amount: 1
      })

    if (updateError) {
      console.error('‚ö†Ô∏è Erreur mise √† jour compteurs:', updateError)
      // Ne pas faire √©chouer la requ√™te pour une erreur de compteur
    } else {
      console.log('‚úÖ Compteurs d\'usage mis √† jour:', usageType, '+1')
    }

    return NextResponse.json({
      success: true,
      data: {
        imageId,
        imageUrl: publicUrl,
        originalPrompt: prompt,
        optimizedPrompt: finalPrompt,
        generationTimeMs: generationTime,
        storagePath,
        isPermanent: true,
        originalXaiUrl: imageUrl,
        creditsUsed: 1, // 1 generation used
        usageType: usageType
      }
    })

  } catch (error) {
    console.error('Generate image error:', error)

    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : 'Internal server error',
        success: false
      },
      { status: 500 }
    )
  }
}
