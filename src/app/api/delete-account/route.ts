import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import Stripe from 'stripe'

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-02-24.acacia',
})

export async function DELETE(req: NextRequest) {
  try {
    console.log('üóëÔ∏è D√©but de la suppression de compte')

    const supabase = await createClient()

    if (!supabase) {
      console.error('‚ùå Impossible de cr√©er le client Supabase')
      return NextResponse.json({ error: 'Erreur de configuration' }, { status: 500 })
    }

    if (!supabase.auth) {
      console.error('‚ùå Client Supabase auth non disponible')
      return NextResponse.json({ error: 'Erreur d\'authentification' }, { status: 500 })
    }

    // V√©rifier l'authentification
    console.log('üîç Tentative de r√©cup√©ration de l\'utilisateur...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    console.log('üîç R√©sultat auth:', {
      user: user ? { id: user.id, email: user.email } : null,
      authError: authError ? authError.message : null
    })

    if (authError || !user) {
      console.error('‚ùå Utilisateur non authentifi√©:', authError)
      return NextResponse.json({
        error: 'Non authentifi√©',
        details: authError ? authError.message : 'Aucun utilisateur trouv√©'
      }, { status: 401 })
    }

    console.log('üóëÔ∏è D√©but de suppression du compte pour:', user.email)

    // 1. R√©cup√©rer et canceller les abonnements Stripe AVANT de supprimer les donn√©es
    const { data: userSubscriptions, error: fetchSubError } = await supabase
      .from('user_subscriptions')
      .select('id, stripe_subscription_id, status')
      .eq('user_id', user.id)

    if (fetchSubError) {
      console.error('‚ùå Erreur r√©cup√©ration abonnements:', fetchSubError)
    } else if (userSubscriptions && userSubscriptions.length > 0) {
      console.log(`üîç ${userSubscriptions.length} abonnement(s) trouv√©(s)`)

      // Canceller chaque abonnement Stripe
      for (const subscription of userSubscriptions) {
        if (subscription.stripe_subscription_id && subscription.status === 'active') {
          try {
            console.log(`üö´ Cancellation abonnement Stripe: ${subscription.stripe_subscription_id}`)
            await stripe.subscriptions.cancel(subscription.stripe_subscription_id)
            console.log(`‚úÖ Abonnement Stripe ${subscription.stripe_subscription_id} cancell√©`)
          } catch (stripeError) {
            console.error(`‚ùå Erreur cancellation Stripe ${subscription.stripe_subscription_id}:`, stripeError)
            // Continue m√™me si la cancellation Stripe √©choue
          }
        }
      }
    }

    // 2. Supprimer les abonnements de la base de donn√©es
    const { error: subscriptionError } = await supabase
      .from('user_subscriptions')
      .delete()
      .eq('user_id', user.id)

    if (subscriptionError) {
      console.error('‚ùå Erreur suppression abonnements:', subscriptionError)
    } else {
      console.log('‚úÖ Abonnements supprim√©s')
    }

    // 3. Supprimer les statistiques d'usage (si la table existe)
    try {
      const { error: usageError } = await supabase
        .from('user_usage_stats')
        .delete()
        .eq('user_id', user.id)

      if (usageError && usageError.code !== '42P01') {
        console.error('‚ùå Erreur suppression statistiques:', usageError)
      } else {
        console.log('‚úÖ Statistiques d\'usage supprim√©es (ou table inexistante)')
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Table user_usage_stats inexistante, ignor√©e')
    }

    // 4. Supprimer les projets de l'utilisateur
    const { error: projectsError } = await supabase
      .from('projects')
      .delete()
      .eq('user_id', user.id)

    if (projectsError) {
      console.error('‚ùå Erreur suppression projets:', projectsError)
    } else {
      console.log('‚úÖ Projets supprim√©s')
    }

    // 5. Supprimer les personnages de l'utilisateur
    const { error: charactersError } = await supabase
      .from('characters')
      .delete()
      .eq('user_id', user.id)

    if (charactersError) {
      console.error('‚ùå Erreur suppression personnages:', charactersError)
    } else {
      console.log('‚úÖ Personnages supprim√©s')
    }

    // 6. Supprimer les d√©cors de l'utilisateur (si la table existe)
    try {
      const { error: backgroundsError } = await supabase
        .from('backgrounds')
        .delete()
        .eq('user_id', user.id)

      if (backgroundsError && backgroundsError.code !== '42P01') {
        console.error('‚ùå Erreur suppression d√©cors:', backgroundsError)
      } else {
        console.log('‚úÖ D√©cors supprim√©s (ou table inexistante)')
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Table backgrounds inexistante, ignor√©e')
    }

    // 7. Supprimer les sc√®nes de l'utilisateur (si la table existe)
    try {
      const { error: scenesError } = await supabase
        .from('scenes')
        .delete()
        .eq('user_id', user.id)

      if (scenesError && scenesError.code !== '42P01') {
        console.error('‚ùå Erreur suppression sc√®nes:', scenesError)
      } else {
        console.log('‚úÖ Sc√®nes supprim√©es (ou table inexistante)')
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Table scenes inexistante, ignor√©e')
    }

    // 8. Supprimer les pages de l'utilisateur (via les projets)
    try {
      // Les pages sont li√©es aux projets, pas directement √† l'utilisateur
      // Elles seront supprim√©es automatiquement par cascade quand on supprime les projets
      console.log('‚úÖ Pages supprim√©es via suppression des projets')
    } catch (error) {
      console.log('‚ö†Ô∏è Suppression des pages via projets')
    }

    // 9. Supprimer toutes les autres donn√©es li√©es √† l'utilisateur
    // (Ajoutez ici d'autres tables si n√©cessaire)

    // 10. Supprimer le compte d'authentification Supabase
    // Utiliser l'API Admin pour supprimer d√©finitivement le compte
    try {
      console.log('üîß Tentative de suppression du compte d\'authentification pour:', user.id)

      // Cr√©er un client admin avec la cl√© de service
      const { createClient } = await import('@supabase/supabase-js')
      const supabaseAdmin = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.SUPABASE_SERVICE_ROLE_KEY!,
        {
          auth: {
            autoRefreshToken: false,
            persistSession: false
          }
        }
      )

      console.log('üîß Client admin cr√©√©, suppression en cours...')

      // Supprimer le compte utilisateur d√©finitivement
      const { error: deleteUserError } = await supabaseAdmin.auth.admin.deleteUser(user.id)

      if (deleteUserError) {
        console.error('‚ùå Erreur suppression compte utilisateur:', deleteUserError)
        console.error('‚ùå D√©tails de l\'erreur:', JSON.stringify(deleteUserError, null, 2))

        // Essayer une suppression alternative via SQL direct
        console.log('üîß Tentative de suppression alternative via SQL...')
        try {
          const { error: sqlError } = await supabaseAdmin
            .from('auth.users')
            .delete()
            .eq('id', user.id)

          if (sqlError) {
            console.error('‚ùå Erreur suppression SQL:', sqlError)
            console.log('‚ö†Ô∏è Donn√©es supprim√©es mais compte d\'authentification conserv√©')
          } else {
            console.log('‚úÖ Compte d\'authentification supprim√© via SQL')
          }
        } catch (sqlError) {
          console.error('‚ùå Erreur suppression SQL alternative:', sqlError)
          console.log('‚ö†Ô∏è Donn√©es supprim√©es mais compte d\'authentification conserv√©')
        }
      } else {
        console.log('‚úÖ Compte d\'authentification supprim√© d√©finitivement')
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression du compte d\'authentification:', error)
      console.log('‚ö†Ô∏è Donn√©es supprim√©es mais compte d\'authentification conserv√©')
    }

    // 11. D√©connecter l'utilisateur de la session actuelle
    try {
      await supabase.auth.signOut()
      console.log('‚úÖ Session utilisateur ferm√©e')
    } catch (error) {
      console.log('‚ö†Ô∏è D√©connexion de session non n√©cessaire')
    }

    return NextResponse.json({
      success: true,
      message: 'Compte supprim√© avec succ√®s - toutes les donn√©es et abonnements ont √©t√© supprim√©s'
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du compte:', error)
    return NextResponse.json({ 
      error: 'Erreur interne du serveur',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 })
  }
}
