// Gestionnaire de s√©lection unifi√© pour coordonner PixiJS et DOM
// G√®re la priorit√© des speech bubbles et la synchronisation des s√©lections

import { Application, Container, FederatedPointerEvent } from 'pixi.js'
import { AssemblyElement, DialogueElement } from '../types/assembly.types'
import { UnifiedCoordinateSystem } from './CoordinateSystem'

export interface SelectionTarget {
  type: 'bubble' | 'panel' | 'image' | 'canvas'
  id: string | null
  element?: AssemblyElement
  layer: 'dom' | 'pixi'
}

export interface SelectionState {
  selectedElements: Set<string>
  activeElement: string | null
  selectionMode: 'single' | 'multiple'
  isEditing: boolean
  editingElementId: string | null
}

/**
 * Gestionnaire de s√©lection unifi√© qui coordonne les interactions
 * entre les √©l√©ments PixiJS et DOM avec priorit√© aux speech bubbles
 */
export class UnifiedSelectionManager {
  private static instance: UnifiedSelectionManager | null = null
  
  private pixiApp: Application | null = null
  private coordinateSystem: UnifiedCoordinateSystem | null = null
  private elements: AssemblyElement[] = []
  
  private state: SelectionState = {
    selectedElements: new Set(),
    activeElement: null,
    selectionMode: 'single',
    isEditing: false,
    editingElementId: null
  }
  
  private callbacks = {
    onSelectionChange: [] as Array<(selectedIds: string[]) => void>,
    onEditStart: [] as Array<(elementId: string) => void>,
    onEditEnd: [] as Array<(elementId: string) => void>
  }

  private constructor() {
    this.setupGlobalEventListeners()
  }

  /**
   * ‚úÖ SINGLETON PATTERN
   */
  static getInstance(): UnifiedSelectionManager {
    if (!UnifiedSelectionManager.instance) {
      UnifiedSelectionManager.instance = new UnifiedSelectionManager()
    }
    return UnifiedSelectionManager.instance
  }

  /**
   * ‚úÖ INITIALISATION
   */
  initialize(
    pixiApp: Application,
    coordinateSystem: UnifiedCoordinateSystem,
    elements: AssemblyElement[]
  ) {
    this.pixiApp = pixiApp
    this.coordinateSystem = coordinateSystem
    this.elements = elements
    
    console.log('üéØ UnifiedSelectionManager initialized')
  }

  /**
   * ‚úÖ MISE √Ä JOUR DES √âL√âMENTS
   */
  updateElements(elements: AssemblyElement[]) {
    this.elements = elements
  }

  /**
   * ‚úÖ GESTION DES CLICS GLOBAUX
   * Priorit√© : Bulles DOM > √âl√©ments PixiJS > Canvas
   */
  handleGlobalClick(event: MouseEvent | FederatedPointerEvent): void {
    const target = this.identifyTarget(event)
    
    console.log('üñ±Ô∏è Global click detected:', target)
    
    // Si on est en mode √©dition, v√©rifier si on sort de l'√©dition
    if (this.state.isEditing) {
      if (target.type !== 'bubble' || target.id !== this.state.editingElementId) {
        this.exitEditMode()
      }
    }
    
    // S√©lectionner le nouvel √©l√©ment
    if (target.id) {
      this.selectElement(target.id, target.layer)
    } else {
      this.clearSelection()
    }
  }

  /**
   * ‚úÖ IDENTIFICATION DE LA CIBLE
   * Priorit√© : Bulles DOM > √âl√©ments PixiJS > Canvas
   */
  private identifyTarget(event: MouseEvent | FederatedPointerEvent): SelectionTarget {
    // 1. PRIORIT√â HAUTE : V√©rifier les bulles DOM
    const bubbleTarget = this.findBubbleTarget(event)
    if (bubbleTarget) {
      return bubbleTarget
    }
    
    // 2. PRIORIT√â MOYENNE : V√©rifier les √©l√©ments PixiJS
    const pixiTarget = this.findPixiTarget(event)
    if (pixiTarget) {
      return pixiTarget
    }
    
    // 3. PRIORIT√â BASSE : Canvas vide
    return { type: 'canvas', id: null, layer: 'pixi' }
  }

  /**
   * ‚úÖ RECHERCHE DE BULLES DOM
   */
  private findBubbleTarget(event: MouseEvent | FederatedPointerEvent): SelectionTarget | null {
    let target: Element | null = null
    
    if (event instanceof MouseEvent) {
      target = event.target as Element
    } else {
      // Pour les √©v√©nements PixiJS, convertir les coordonn√©es
      const domPoint = this.coordinateSystem?.canvasToDOM(
        event.global.x,
        event.global.y
      )
      if (domPoint) {
        target = document.elementFromPoint(domPoint.x, domPoint.y)
      }
    }
    
    if (!target) return null
    
    // Remonter dans le DOM pour trouver une bulle
    const bubbleElement = target.closest('[data-bubble-id]')
    if (bubbleElement) {
      const bubbleId = bubbleElement.getAttribute('data-bubble-id')
      const element = this.elements.find(el => el.id === bubbleId)
      
      if (element && element.type === 'dialogue') {
        return {
          type: 'bubble',
          id: bubbleId!,
          element,
          layer: 'dom'
        }
      }
    }
    
    return null
  }

  /**
   * ‚úÖ RECHERCHE D'√âL√âMENTS PIXI
   */
  private findPixiTarget(event: MouseEvent | FederatedPointerEvent): SelectionTarget | null {
    if (!this.pixiApp || !this.coordinateSystem) return null
    
    let canvasPoint: { x: number; y: number }
    
    if (event instanceof MouseEvent) {
      // Convertir les coordonn√©es DOM vers canvas
      canvasPoint = this.coordinateSystem.domToCanvas(event.clientX, event.clientY)
    } else {
      // √âv√©nement PixiJS d√©j√† en coordonn√©es canvas
      canvasPoint = this.coordinateSystem.adjustPixiCoordinates(
        event.global.x,
        event.global.y
      )
    }
    
    // Chercher l'√©l√©ment PixiJS sous le curseur
    const hitElement = this.findElementAtPoint(canvasPoint.x, canvasPoint.y)
    
    if (hitElement) {
      return {
        type: hitElement.type === 'panel' ? 'panel' : 'image',
        id: hitElement.id,
        element: hitElement,
        layer: 'pixi'
      }
    }
    
    return null
  }

  /**
   * ‚úÖ RECHERCHE D'√âL√âMENT √Ä UN POINT
   */
  private findElementAtPoint(x: number, y: number): AssemblyElement | null {
    // Chercher dans l'ordre inverse (z-index d√©croissant)
    const sortedElements = [...this.elements]
      .filter(el => el.type !== 'dialogue') // Exclure les bulles (g√©r√©es en DOM)
      .sort((a, b) => b.transform.zIndex - a.transform.zIndex)
    
    for (const element of sortedElements) {
      const { x: elX, y: elY, width, height } = element.transform
      
      if (x >= elX && x <= elX + width && y >= elY && y <= elY + height) {
        return element
      }
    }
    
    return null
  }

  /**
   * ‚úÖ S√âLECTION D'UN √âL√âMENT
   */
  selectElement(elementId: string, layer: 'dom' | 'pixi'): void {
    // Mode s√©lection simple pour l'instant
    this.state.selectedElements.clear()
    this.state.selectedElements.add(elementId)
    this.state.activeElement = elementId
    
    console.log(`üéØ Element selected: ${elementId} (${layer})`)
    
    // Synchroniser avec les couches appropri√©es
    if (layer === 'dom') {
      this.notifyDomLayer(elementId)
    } else {
      this.notifyPixiLayer(elementId)
    }
    
    // Notifier les callbacks
    this.notifySelectionChange()
  }

  /**
   * ‚úÖ D√âMARRAGE DU MODE √âDITION
   */
  startEditMode(elementId: string): void {
    if (this.state.isEditing && this.state.editingElementId !== elementId) {
      this.exitEditMode()
    }
    
    this.state.isEditing = true
    this.state.editingElementId = elementId
    
    console.log(`‚úèÔ∏è Edit mode started: ${elementId}`)
    
    // Notifier les callbacks
    this.callbacks.onEditStart.forEach(callback => callback(elementId))
    
    // D√©sactiver la s√©lection pendant l'√©dition
    document.dispatchEvent(new CustomEvent('selection-disabled', {
      detail: { elementId }
    }))
  }

  /**
   * ‚úÖ SORTIE DU MODE √âDITION
   */
  exitEditMode(): void {
    if (!this.state.isEditing) return
    
    const elementId = this.state.editingElementId
    
    this.state.isEditing = false
    this.state.editingElementId = null
    
    console.log(`‚úèÔ∏è Edit mode ended: ${elementId}`)
    
    // Notifier les callbacks
    if (elementId) {
      this.callbacks.onEditEnd.forEach(callback => callback(elementId))
    }
    
    // R√©activer la s√©lection
    document.dispatchEvent(new CustomEvent('selection-enabled'))
  }

  /**
   * ‚úÖ EFFACEMENT DE LA S√âLECTION
   */
  clearSelection(): void {
    this.state.selectedElements.clear()
    this.state.activeElement = null
    
    console.log('üéØ Selection cleared')
    
    this.notifySelectionChange()
  }

  /**
   * ‚úÖ NOTIFICATION COUCHE DOM
   */
  private notifyDomLayer(elementId: string): void {
    document.dispatchEvent(new CustomEvent('bubble-select', {
      detail: { elementId }
    }))
  }

  /**
   * ‚úÖ NOTIFICATION COUCHE PIXI
   */
  private notifyPixiLayer(elementId: string): void {
    // Cette logique sera int√©gr√©e avec le syst√®me PixiJS existant
    console.log(`üéØ Notifying PixiJS layer: ${elementId}`)
  }

  /**
   * ‚úÖ NOTIFICATION CHANGEMENT DE S√âLECTION
   */
  private notifySelectionChange(): void {
    const selectedIds = Array.from(this.state.selectedElements)
    this.callbacks.onSelectionChange.forEach(callback => callback(selectedIds))
  }

  /**
   * ‚úÖ CONFIGURATION DES EVENT LISTENERS GLOBAUX
   */
  private setupGlobalEventListeners(): void {
    // √âcouter les √©v√©nements personnalis√©s
    document.addEventListener('bubble-edit-start', (e: any) => {
      this.startEditMode(e.detail.bubbleId)
    })
    
    document.addEventListener('bubble-exit-edit', () => {
      this.exitEditMode()
    })
    
    // √âcouter les clics globaux
    document.addEventListener('click', (e) => {
      this.handleGlobalClick(e)
    })
  }

  /**
   * ‚úÖ ABONNEMENT AUX √âV√âNEMENTS
   */
  onSelectionChange(callback: (selectedIds: string[]) => void): () => void {
    this.callbacks.onSelectionChange.push(callback)
    return () => {
      const index = this.callbacks.onSelectionChange.indexOf(callback)
      if (index > -1) {
        this.callbacks.onSelectionChange.splice(index, 1)
      }
    }
  }

  onEditStart(callback: (elementId: string) => void): () => void {
    this.callbacks.onEditStart.push(callback)
    return () => {
      const index = this.callbacks.onEditStart.indexOf(callback)
      if (index > -1) {
        this.callbacks.onEditStart.splice(index, 1)
      }
    }
  }

  onEditEnd(callback: (elementId: string) => void): () => void {
    this.callbacks.onEditEnd.push(callback)
    return () => {
      const index = this.callbacks.onEditEnd.indexOf(callback)
      if (index > -1) {
        this.callbacks.onEditEnd.splice(index, 1)
      }
    }
  }

  /**
   * ‚úÖ OBTENIR L'[FR-UNTRANSLATED: √âTAT ACTUEL
   */
  getState(): SelectionState {
    return { ...this.state }
  }

  /**
   * ‚úÖ NETTOYAGE
   */
  cleanup(): void {
    this.callbacks.onSelectionChange.length = 0
    this.callbacks.onEditStart.length = 0
    this.callbacks.onEditEnd.length = 0
    
    this.state.selectedElements.clear()
    this.state.activeElement = null
    this.state.isEditing = false
    this.state.editingElementId = null
    
    console.log('üßπ UnifiedSelectionManager cleaned up')
  }
}
